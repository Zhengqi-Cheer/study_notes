Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-06-21T15:29:40+08:00

====== libubox ======
Created 星期二 21 六月 2022

[[https://www.cnblogs.com/laoxiaobaiup/p/9366880.html|源]]

**1、libubox概述**
	libubox是openwrt新版本中的一个基础库，有很多应用是基于libubox开发的，如uhttpd,netifd,ubusd等。
	libubox主要提供以下两种功能：
		a.提供一套基于事件驱动的机制；
		b.提供多种开发支持接口，如链表、kv链表、平衡查找二叉树、md5、json等。
	使用libubox开发的好处有如下几点：
　　		a.可以使程序基于事件驱动，从而可实现在单线程中处理多个任务；
		b.基于libubox提供的API可以加快开发进度，提高程序的稳定性；
		c. 能更好的将程序融入openwrt架构中，因为新的openwrt的很多应用和库都基于libubox开发，当前分析使用的libubox版本为libubox-2014-08-04。
**2、uloop**
	uloop是libubox下的一个模块，有三个功能：文件描述符触发事件的监控，timeout定时器处理， 当前进程的子进程的维护
	
	**2.1 整体框架**
	2.1.1 主体框架接口
		1）初始化事件循环
			int uloop_init（void）；
			创建一个epoll的句柄，最多监控32个文件描述符。
			设置文件描述符的属性，如FD_CLOEXEC。
		
		2）事件循环主处理接口
			void uloop_run (void)
		
		3) 销毁事件循环
			void uloop_done (void)
			关闭epoll句柄。
			清空定时器链表中的所以定时器。
			清空进程处理事件链表中删除的所以的进程事件节点。
	
	2.1.2 主框架流程
		{{.\pasted_image.png}}
		
	uloop_run轮询处理定时器、进程、描述符事件。
	a）遍历定时器timeouts链表判断是否有定时器超时，如果有则进行相应的回调处理，没有跳过。
	b）判断是否有子进程退出SIGCHLD信号，有就会遍历processes进程处理的链表，调用相应的回调函数，没有跳过。
	c）计算出距离下一个最近的定时器的时间，作为文件描述符事件epoll的超时时间。然后epoll进行事件监听，如果有文件描述符准备就绪(可读写时间)则调用相应的回调函数，或者有信号进行中断epoll返回停止监听，否则epoll阻塞直到超时时间完成。
	
	
	**2.2描述符事件**
	2.2.1 文件描述符uloop结构
	{{.\pasted_image001.png}}
	
	2.2.2 描述符uloop使用接口
		1）注册一个新描述符到事件处理循环
			int uloop_fd_add ( struct uloop_fd *sock, unsigned int flags );
			uloop最多支持10个描述符事件
		2）从事件处理循环中销毁指定描述符
		　int uloop_fd_delete(struct uloop_fd *sock)；
	
	2.2.3描述符事件流程
		　int uloop_fd_delete(struct uloop_fd *sock)
			{{.\pasted_image003.png}}
			
	**2.3 定时器事件**
	2.3.1  定时器timeout的结构	
		struct uloop_timeout
		{
			struct list_head list;  //链表节点
			bool pending;           //添加一个新的timeout pending是true， false删除该节点timeout
			uloop_timeout_handler cb; //超时处理函数
			   struct timeval time;      //超时时间
		};
		
	2.3.2 定时器使用接口
		1）注册一个新的定时器
		


