Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2024-10-30T10:02:30+08:00

====== 4.3 进程间通信与同步 ======
Created 星期三 30 十月 2024

== =================管道========================= ==


管道读写使用write/read。管道本质是文件。
1、半双工管道 PIPE
单向通信：仅将某个进程的输入和另一个进程的输出项链接。
pipe() 的2个数组成员，第一个是读，第二个是写。**返回的读写描述符在数组中。**


注意：管道阻塞与操作的原子性。
	原子性：管道buff满了，只有管道另一端读完才会继续写。


2、命名管道FIFO
与普通管道不同：
	1、在文件系统中以设备特殊文件形式存在。
	2、不同进程可以通过其共享数据。（普通管道不可以？）

创建：
	1、shell下，mkfifo命令。
	2、c语言， mkfifo().
与普通管道操作的区别：读写时必须使用open建立连接。且单独的读或写会一直阻塞，直到有进程写或读。


== ====消息队列---可使用ipcs查看消息队列，信号量，共享内存。 ==
	消息队列是linux内核地址空间的内部链表，每个消息队列相互独立，可用IPC标识符唯一标识。
	
	常用消息缓冲区结构：msgbuf,  #include<linux/msg.h>
	(1)常用函数组
	## msgget()，获取msqid。
	## msgsnd()，发送消息队列
	## msgrcv()，接收消息队列
	## msgctl(), 消息队列控制，获取或设置队列信息。

== ====信号量 ==
	是一种计数器，常用于作为一种锁机制。
	semget() 创建新的信号量集合。 IPC_CREAT，IPC_EXCL。
	semop() 向信号量发送命令。
	semctl() 控制信号量。
	

== ====共享内存---是IPC的快捷方式 ==
	#实现原理：多个进程对内存进行映射。是同一块物理空间。
	#与管道，消息队列相比：共享内存通信没有中间过程，不需要中间机制进行转换。
	
	① 创建共享内存函数: 
		shmget()，使用此函数可访问现有的或创建新的共享内存。访问是获取标识符。
	② 进程地址链接共享内存地址函数：
		void *shmat(int shmid, const void *shmaddr, int shmflg);
	③ 进程地址断开共享内存地址函数
		int shmdt(const void *shmaddr);
	④ 共享内存控制函数：
		shmctl()，可以获取、设置和删除共享内存。

== ====信号 ==
	信号（signal），最古老的通信机制。用于在多个进程间传递异步信号。可以内核产生，也可有其他进程产生(需要权限)。可以使用kill -l 列出系统的所有信号
	1. 信号截取函数signal()
		a. 原型： #include <signal.h>
		
			   typedef void (*sighandler_t)(int);
		
			   sighandler_t signal(int signum, sighandler_t handler);
		b. 使用此函数，用户可以自己处理该信号。
	1. 向进程发送信号
		a. int kill(pid_t pid, int sig)，pid为0时是向系统所有进程发送信号。
		b. raise(int sig)，自举一个信号sig，即向当前进程发送信号。











































